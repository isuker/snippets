$a= 5
$a=$hosts[0]->dispatch('powerShellPassThrough',command='Get-Date')
$a=$hosts[0]->dispatch('powerShellPassThrough',command=>'Get-Date')
$a=$vnxs[0]->getPassiveSp()
$a=5
$b->find(type=>'Sp',force_sync=>1)
$b=$vnxs[0]
$c->{EFT2K3}
$c=$cs->getProperty("domains")
$celerras[0]->find(type => "CifsService", criteria=>{datamover=>'server_3'})
$celerras[0]->getProperty("i18n_mode")
$client->mountCifsFilesystem("\\$CIFS_netbios\\$share", username => "$CIFS_domain/$adminUser", password => "$adminPassword");
$client->mountCifsFilesystem(export=>"\\$CIFS_netbios\\$share", username => "$CIFS_domain/$adminUser", password => "$adminPassword");
$cluster = $self->{'cluster-1'}->{'clusterObj'}
$cmd = 'Get-VirtualDisk | ? FriendlyName -eq Space1 | Remove-VirtualDisk -Confirm:$false'
$cmd = 'Get-VirtualDisk | ? FriendlyName -eq Space1 | Remove-VirtualDisk -Confirm:$false';
$cmd="curl -d '{"mount_path":"\\\\10.108.127.10\\cifs00", "username":"administrator", "password":"Password123!"}' 10.10.37.191/api/instances/syncpoint/2538744/action/map -v"
$cmd='curl -d '{"mount_path":"\\\\10.108.127.10\\cifs00", "username":"administrator", "password":"Password123!"}' 10.10.37.191/api/instances/syncpoint/2538744/action/map -v'
$cmd=curl -d '{"mount_path":"\\\\10.108.127.10\\cifs00", "username":"administrator", "password":"Password123!"}' 10.10.37.191/api/instances/syncpoint/2538744/action/map -v
$cmd=qw/"curl -d '{"mount_path":"\\\\10.108.127.10\\cifs00", "username":"administrator", "password":"Password123!"}' 10.10.37.191/api/instances/syncpoint/2538744/action/map -v"/
$cmd=qw/curl -d '{"mount_path":"\\\\10.108.127.10\\cifs00", "username":"administrator", "password":"Password123!"}' 10.10.37.191/api/instances/syncpoint/2538744/action/map -v/
$cs
$cs = $hosts[2]->find(type=> "CifsService", criteria => {datamover=>"server_3"});
$cs->getDatamoverMountInfo(datamover=>$dm)
$cs->getProperties("fully_qualified_domain_name", "name")
$cs->getProperty("name")
$data->{dev}->find(type=> "CifsService", criteria => {datamover=>$dmName});
$device1->[0]->getDevice()
$deviceA = $self->vplexCreateDevice($self->{vplexA});
$devices = $self->vplexCreateDevice($self->{vplexA})
$devices = $self->vplexCreateDevice($vplex)
$devices = $self->vplexCreateDevice()
$devices->[0]
$devices->[0}
$devices1 = $self->vplexCreateDevice($self->{vplexA})
$devices1->[0]->delete()
$devices1->[0]->remove()
$devices1->[1]->remove()
$devices2 = $self->vplexCreateDevice($self->{vplexB})
$dir=$hosts[0]->createTemporaryDirectory()
$dm->commit()
$dm->getDatamoverMountInfo()
$dm->getProperies()
$dm->getProperties()
$dm=$celerra[0]->find(type=> "vdm", criteria => {datamover=>$dmName});
$dm=$celerras[0]->find(type => "datamover", criteria => { slot => $dmSlotNumber })
$dm=$celerras[0]->find(type => "datamover", criteria => { slot => 3 })
$dm=$celerras[0]->find(type=> "vdm", criteria => {datamover=>"server_3"});
$dm=$celerras[0]->find(type=> "vdm", criteria => {datamover=>$dmName});
$dm[0]->commit()
$dm[0]->commmit()
$dm[0]->remove()
$f1=$celerras[0]
$f2=$celerras[1]
$fs
$host
$host = $hosts[1]
$host->deleteFile(path=>$self->{mapping_filename});
$host->loginCifsServer(export=>"\\\\$CIFS_netbios", domain=>"EFT2K3", username => "cifsuser", password => "cifsuser");
$host[0]->killProcess(process_name=>"FileFiltering.exe")
$hosts[0]->checkForLogEvent()
$hosts[0]->checkForLogEvent(event=>'system', expression=>'')
$hosts[0]->checkForLogEvent(event=>'system', expression=>'dfdfd')
$hosts[0]->checkForLogEvent(event=>'system', expression=>'dfdfd', start_date=>'', end_date=>"")
$hosts[0]->createIoxBlockSession()
$hosts[0]->doesPathExist(path=>"")
$hosts[0]->doesPathExist(path=>"C:")
$hosts[0]->doesPathExist(path=>"C:\")
$hosts[0]->getDisks()
$hosts[0]->getIoxBlockSession()
$hosts[0]->killProcess(process_name=>"FileFiltering.exe")
$hosts[0]->killProcess(process_name=>"FileFiltering.exe", force=>1)
$hosts[0]->mountCifsFilesystem()
$hosts[0]->mountCifsFilesystem(export=>"\\", username => "EFT2K3/cifsuser", password => "cifsuser");
$hosts[0]->mountCifsFilesystem(export=>"\\R96E3EFT2K3\\svr2sh1", username=>"EFT2K3\cifsuser", password=>"cifsuser")
$hosts[0]->mountCifsFilesystem(export=>"\\R96E3EFT2K3\svr2sh1", username=>"EFT2K3\cifsuser", password=>"cifsuser")
$hosts[0]->mountCifsFilesystem(export=>"\\\\10.244.205.92\\TestShr10.244.10.142_Cifs9")
$hosts[0]->mountCifsFilesystem(export=>"\\\\10.244.205.92\\TestShr10.244.10.142_Cifs9", username => "Administrator", password => "Password123#")
$hosts[0]->mountCifsFilesystem(export=>"\\\\10.244.248.28\\TestShr_Cifs0",username=>"Administrator",password=>"Password123#")
$hosts[0]->mountCifsFilesystem(export=>"\\\\R96E3EFT2K3\\svr3fs1", domain=>"EFT2K3"username => "cifsuser", password => "cifsuser");
$hosts[0]->mountCifsFilesystem(export=>"\\\\R96E3EFT2K3\\svr3fs1", username => "EFT2K3/cifsuserr", password => "cifsuser");
$hosts[0]->mountCifsFilesystem(export=>"\\\\R96E3EFT2K3\\svrsh1", username => "EFT2K3/cifsuser", password => "cifsuser");
$hosts[0]->mountCifsFilesystem(mountpoint=>"Q", export=>"\\\\10.244.205.92\\TestShr10.244.10.142_Cifs9")
$hosts[0]->mountCifsFilesystem(mountpoint=>"Q:", export=>"\\\\10.244.205.92\\TestShr10.244.10.142_Cifs9")
$hosts[0]->reboot()
$hosts[0]->run(command-=>['cmd', '/c', 'net use'])
$hosts[0]->run(command->['cmd', '/c', 'net use'])
$hosts[0]->run(command=>["C:\\Windows\\TEMP\\tmp_1393402712_993514_9916_0\\FileFiltering.exe r96e-3cs0 server_3 EFT2K3 10.109.165.34 10.109.165.35 iShare3440 notIShare3440 1 400 0 NO"])
$hosts[0]->run(command=>["C:\\Windows\\TEMP\\tmp_1393402712_993514_9916_0\\FileFiltering.exe","r96e-3cs0" server_3 EFT2K3 10.109.165.34 10.109.165.35 iShare3440 notIShare3440 1 400 0 NO"])
$hosts[0]->run(command=>["FileFiltering.exe","r96e-3cs0" server_3 EFT2K3 10.109.165.34 10.109.165.35 iShare3440 notIShare3440 1 400 0 NO"])
$hosts[0]->run(command=>['cmd', '/c', "C:\\Windows\\TEMP\\tmp_1393402712_993514_9916_0\\"])
$hosts[0]->run(command=>['cmd', '/c', "C:\\Windows\\TEMP\\tmp_1393402712_993514_9916_0\\FileFiltering.exe r96e-3cs0 server_3 EFT2K3 10.109.165.34 10.109.165.35 iShare3440 notIShare3440 1 1 0 NO"])
$hosts[0]->run(command=>['cmd', '/c', "C:\\Windows\\TEMP\\tmp_1393402712_993514_9916_0\\FileFiltering.exe r96e-3cs0 server_3 EFT2K3 10.109.165.34 10.109.165.35 iShare3440 notIShare3440 1 400 0 NO"])
$hosts[0]->run(command=>['cmd', '/c', "C:\\Windows\\TEMP\\tmp_1393402712_993514_9916_0\\FileFiltering.exe"])
$hosts[0]->run(command=>['cmd', '/c', "C:\\Windows\\TEMP\\tmp_1393402712_993514_9916_0\\lgtst.exe r96e-3cs0 server_3 EFT2K3 10.109.165.34 10.109.165.35 iShare3440 notIShare3440 1 1 0 NO"])
$hosts[0]->run(command=>['cmd', '/c', "DEBUG_ON=1; C:\\Windows\\TEMP\\tmp_1393402712_993514_9916_0\\FileFiltering.exe r96e-3cs0 server_3 EFT2K3 10.109.165.34 10.109.165.35 iShare3440 notIShare3440 1 400 0 NO"])
$hosts[0]->run(command=>['cmd', '/c', "ECHO %HOME%; dir C:\\Windows\\TEMP\\tmp_1393402712_993514_9916_0"])
$hosts[0]->run(command=>['cmd', '/c', "FileFiltering.exe 10.109.183.53 server_3 EFT2K3 10.109.165.34 10.109.165.35 iShare3440 notIShare3440 1 1 0 NO"], directory=>"C:\Windows\TEMP\tmp_1393472200_979902_9344_0", environment=>{DEBUG_ON=>1})
$hosts[0]->run(command=>['cmd', '/c', "FileFiltering.exe 10.109.183.53 server_3 EFT2K3 10.109.165.34 10.109.165.35 iShare9344 notIShare9344 1 1 0 NO"], directory=>"C:\\Windows\\TEMP\\tmp_1393472200_979902_9344_0", environment=>{DEBUG_ON=>1})
$hosts[0]->run(command=>['cmd', '/c', "FileFiltering.exe r96e-3cs0 server_3 EFT2K3 10.109.165.34 10.109.165.35 iShare3440 notIShare3440 1 1 0 NO"])
$hosts[0]->run(command=>['cmd', '/c', "FileFiltering.exe r96e-3cs0 server_3 EFT2K3 10.109.165.34 10.109.165.35 iShare3440 notIShare3440 1 1 0 NO"], directory=>"C:\\Windows\\TEMP\\tmp_1393402712_993514_9916_0", environment=>{DEBUG_ON=>1})
$hosts[0]->run(command=>['cmd', '/c', "FileFiltering.exe r96e-3cs0 server_3 EFT2K3 10.109.165.34 10.109.165.35 iShare3440 notIShare3440 1 400 0 NO"])
$hosts[0]->run(command=>['cmd', '/c', "cd /c C:\\Windows\\TEMP\\tmp_1393402712_993514_9916_0 C:\\Windows\\TEMP\\tmp_1393402712_993514_9916_0\\\FileFiltering.exe r96e-3cs0 server_3 EFT2K3 10.109.165.34 10.109.165.35 iShare3440 notIShare3440 1 1 0 NO"])
$hosts[0]->run(command=>['cmd', '/c', "cd C:\\Windows\\TEMP\\tmp_1393402712_993514_9916_0"])
$hosts[0]->run(command=>['cmd', '/c', "cd C:\\Windows\\TEMP\\tmp_1393402712_993514_9916_0; FileFiltering.exe r96e-3cs0 server_3 EFT2K3 10.109.165.34 10.109.165.35 iShare3440 notIShare3440 1 1 0 NO"])
$hosts[0]->run(command=>['cmd', '/c', "cd C:\\Windows\\TEMP\\tmp_1393402712_993514_9916_0; dir %CWD%"])
$hosts[0]->run(command=>['cmd', '/c', "cd C:\\Windows\\TEMP\\tmp_1393402712_993514_9916_0; dir %PWD%"])
$hosts[0]->run(command=>['cmd', '/c', "cd C:\\Windows\\TEMP\\tmp_1393402712_993514_9916_0; dir ."])
$hosts[0]->run(command=>['cmd', '/c', "cd C:\\Windows\\TEMP\\tmp_1393402712_993514_9916_0; dir"])
$hosts[0]->run(command=>['cmd', '/c', "cd C:\\Windows\\TEMP\\tmp_1393402712_993514_9916_0;C:\\Windows\\TEMP\\tmp_1393402712_993514_9916_0\\\FileFiltering.exe r96e-3cs0 server_3 EFT2K3 10.109.165.34 10.109.165.35 iShare3440 notIShare3440 1 1 0 NO"])
$hosts[0]->run(command=>['cmd', '/c', "cd C:\\Windows\\TEMP\\tmp_1393402712_993514_9916_0C:\\Windows\\TEMP\\tmp_1393402712_993514_9916_0\; \\FileFiltering.exe r96e-3cs0 server_3 EFT2K3 10.109.165.34 10.109.165.35 iShare3440 notIShare3440 1 1 0 NO"])
$hosts[0]->run(command=>['cmd', '/c', "del lgtst.exe "], directory=>"C:\\Perl64\\bin\\")
$hosts[0]->run(command=>['cmd', '/c', "del lgtst.exe /y"], directory=>"C:\\Perl64\\bin\\")
$hosts[0]->run(command=>['cmd', '/c', "del"], directory=>"C:\\Perl64\\bin\\")
$hosts[0]->run(command=>['cmd', '/c', "dir C:\Perl"])
$hosts[0]->run(command=>['cmd', '/c', "dir C:\Windows\TEMP\tmp_1393401439_13500_4076_0\"])
$hosts[0]->run(command=>['cmd', '/c', "dir C:\Windows\TEMP\tmp_1393402712_993514_9916_0"])
$hosts[0]->run(command=>['cmd', '/c', "dir C:\\Perl"])
$hosts[0]->run(command=>['cmd', '/c', "dir C:\\Windows\\TEMP\\tmp_1393401439_13500_4076_0"])
$hosts[0]->run(command=>['cmd', '/c', "dir C:\\Windows\\TEMP\\tmp_1393402712_993514_9916_0"])
$hosts[0]->run(command=>['cmd', '/c', "dir C:\\Windows\\TEMP\\tmp_1393407204_645245_10312_0"])
$hosts[0]->run(command=>['cmd', '/c', "dir L:"])
$hosts[0]->run(command=>['cmd', '/c', "dir X:"])
$hosts[0]->run(command=>['cmd', '/c', "dir"], directory=>"C:")
$hosts[0]->run(command=>['cmd', '/c', "dir"], directory=>"C:\\Perl64\bin")
$hosts[0]->run(command=>['cmd', '/c', "dir"], directory=>"C:\\Perl\\bin")
$hosts[0]->run(command=>['cmd', '/c', "dir"], directory=>"C;\\Perl\\bin")
$hosts[0]->run(command=>['cmd', '/c', "echo $HOME; dir C:\\Windows\\TEMP\\tmp_1393402712_993514_9916_0"])
$hosts[0]->run(command=>['cmd', '/c', "echo \%HOME\%; dir C:\\Windows\\TEMP\\tmp_1393402712_993514_9916_0"])
$hosts[0]->run(command=>['cmd', '/c', "net delete Y: /delete /y"])
$hosts[0]->run(command=>['cmd', '/c', "net help"])
$hosts[0]->run(command=>['cmd', '/c', "net use /delete /y"])
$hosts[0]->run(command=>['cmd', '/c', "net use /delete all /y"])
$hosts[0]->run(command=>['cmd', '/c', "net use W: /delete /y"])
$hosts[0]->run(command=>['cmd', '/c', "net use Y: /delete /y"])
$hosts[0]->run(command=>['cmd', '/c', "net use \\R96E3EFT2K3 /USER:EFT2K3\cifsuser cifsuser"])
$hosts[0]->run(command=>['cmd', '/c', "net use x: /delete /y"])
$hosts[0]->run(command=>['cmd', '/c', "net use z: /delete /y"])
$hosts[0]->run(command=>['cmd', '/c', "net use"])
$hosts[0]->run(command=>['cmd', '/c', "net view"])
$hosts[0]->run(command=>['cmd', '/c', "net"])
$hosts[0]->run(command=>['cmd', '/c', "set DEBUG_ON=1; C:\\Windows\\TEMP\\tmp_1393402712_993514_9916_0\\FileFiltering.exe r96e-3cs0 server_3 EFT2K3 10.109.165.34 10.109.165.35 iShare3440 notIShare3440 1 400 0 NO"])
$hosts[0]->run(command=>['cmd', '/c', "set PATH='C:\\Windows\\TEMP\\tmp_1393402712_993514_9916_0'; FileFiltering.exe r96e-3cs0 server_3 EFT2K3 10.109.165.34 10.109.165.35 iShare3440 notIShare3440 1 1 0 NO"])
$hosts[0]->run(command=>['cmd', '/c', "set"], directory=>"C:")
$hosts[0]->run(command=>['cmd', '/c', "set"], directory=>"C:\\Perl\\bin")
$hosts[0]->run(command=>['cmd', '/c', 'net use Q: delete /y'])
$hosts[0]->run(command=>['cmd', '/c', 'net use \\R96E3EFT2K3 /USER:EFT2K3\cifsuser cifsuser'])
$hosts[0]->run(command=>['cmd', '/c', 'net use'])
$hosts[0]->run(command=>['sh', '/c', 'uname'])
$hosts[0]->run(commands=>['cmd', '/c', 'net use Q: delete /y'])
$hosts[0]->run(commands=>['cmd', '/c', 'net use'])
$hosts[0]->run(commmands=>['cmd', '/c', 'net use Q: delete /y'])
$hosts[0]->unmountCifsFilesystem(mountpoint=>"Q", export=>"\\\\10.244.205.92\\TestShr10.244.10.142_Cifs9")
$hosts[0]->unmountCifsFilesystem(mountpoint=>"S:", export=>"\\\\10.109.165.34\svr3sh1")
$hosts[0]->unmountCifsFilesystem(mountpoint=>"Z:", export=>"\\\\10.244.205.92\\TestShr10.244.10.142_Cifs9")
$hosts[0]->unmountCifsFilesystem(mountpoint=>"z", export=>"\\\\10.244.205.92\\TestShr10.244.10.142_Cifs9")
$hosts[1]->createIoxBlockSession()
$hosts[1]->init()
$hosts[1]->mountCifsFilesystem(  export=>"\\\\10.244.248.28\\TestShr_Cifs0",username=>"Administrator",passdfdfdword=>"Password123#")
$hosts[1]-init()
$hosts[2]->_validatePath()
$hosts[2]->_validatePath(path=>"C:\")
$hosts[2]->_validatePath(path=>"C:\\")
$hosts[2]->deleteDirectory(path=>"\\\\10.109.165.34\\C\$\\.filefilter")
$hosts[2]->deleteDirectory(path=>"\\\\10.109.165.34\\C\$\\.filefilter\\*")
$hosts[2]->run(command=>['cmd', '/c', "\\\\10.109.165.34\\C\$\\.filefilter\\*"])
$hosts[2]->run(command=>['cmd', '/c', "del /Q \\\\10.109.165.34\\C\$\\.filefilter\\*"])
$hosts[2]->run(command=>['cmd', '/c', 'del /Q  \\10.109.165.34\C$\.filefilter\*'])
$hosts[2]->unmountCifsFilesystem(mountpoint=>'Y:')
$hosts[2]->unmountCifsFilesystem(mountpoint=>'Z:')
$hostss[0]->run(command=>['cmd', '/c', 'net use \\R96E3EFT2K3 /USER:EFT2K3\cifsuser cifsuser'])
$iox
$iox = $self->startIoxIO(luns=>\@vv, host=>$host);
$iox->checkHistoryForErrors()
$iox->getStatus()
$iox->init()
$iox->start()
$iox->start(luns=>[$vv[1], $vv[2]])
$iox->start(luns=>[$vv[1]])
$iox->start(luns=>[$vv[1]],io_mode=>'RC')
$iox->stop()
$iox=$hosts[1]->createIoxBlockSession()
$iox=hosts[1]->createIoxBlockSession()
$key = 'cluster-1'
$key='cluster-1'
$lun    = "dfdfdfd"
$m="F"
$mount=$hosts[0]->initializeDisk(disk=>'5',filesystem=>'NTFS')
$my= new Automatos::Component::Battery::Emc::Vnx
$my= new Automatos::Component::Battery::Emc::Vnx(device=>$a, properties=>{sp=>'spb'})
$my= new Automatos::Component::Battery::Emc::Vnx(device=>$b)
$my= new Automatos::Component::Battery::Emc::Vnx(device=>$b, properties=>{sp=>'spa'})
$my= new Automatos::Component::Battery::Emc::Vnx(device=>$b, properties=>{sp=>'spb'})
$my= new Automatos::Component::Battery::Emc::Vnx(device=>$b, {name=>'spa'})
$my= new Automatos::Component::Battery::Emc::Vnx(device=>$b, {sp=>'spa'})
$my= new Automatos::Component::Battery::Emc::Vnx(device=>$p)
$name
$name = $host->getHostname();
$name = $key
$name=""
$name="cluster-1"
$name='cluster-1'
$p->run(command=>['cmd', '/c', 'net use'])
$p1=>getPropries()
$self
$self->
$self->preTestCase()
$self->startIoxIO()
$self->startIoxIO(luns=>[], host=>$host)
$self->startIoxIO(luns=>[], host=>$hosts[0])
$self->startIoxIO(luns=>[], host=>$hosts[1])
$self->vnxGenMappingFile($hosts[0
$self->vnxGenMappingFile($hosts[0],$self->{vnxA}
$self->vnxGenMappingFile($hosts[1],$self->{vnxA}, \@lun)
$self->vplex2CluserName($self->{vplexA})
$self->vplex2CluserName($vplex)
$self->vplex2CluserName()
$self->vplex2ClusterName($self)
$self->vplex2ClusterName($self->{vplexA})
$self->vplex2ClusterName($self->{vplexC})
$self->vplex2ClusterName($vplex)
$self->vplex2ClusterName($vplexd)
$self->vplexClaim($self->{vplexB}, $self->{vnxB}, 'cluster-2');
$self->vplexClaim($self->{vplexB}, $self->{vnxB}, 'cluster-2');ls
$self->vplexCreateVirtualVolume($devices)
$self->vplexCreateVirtualVolume($devices->[0])
$self->vplexDoMigration(name=>'rayTest', source=>$devices->[0], target=>$d2[1])
$self->vplexDoMigration(name=>'rayTest2', source=>$devices1->[0], target=>$d2[1])
$self->{'cluster-1'}->{lun} = \@lun
$self->{'cluster-1'}->{lun} = \@lun1
$self->{'cluster-2'}->{lun} = \@lun2
$self->{'cluster-2'}->{lun} = \@lunB
$sp
$sp->getHostObject()->{ipv4_address}
$sp=$b->getActiveSp()
$sw = Automatos::Device::Switch->discover(type => "power", model => "wti",ports => { port => [{ attached_device => $f1, id => "B1" },]},communication => {ipv4_address => "10.244.83.10", type => "telnet",username => "admin",password => "admin",persist_connection=>0});
$switch = Automatos::Device::Switch->discover(type => "power", model => "wti",ports => { port => [{ attached_device => $f1, id => $params{apc_port} },]},communication => {ipv4_address => "10.244.83.10", type => "telnet",username => "admin",password => "admin",});
$switch = Automatos:Device:Switch->discover(type => "power", model => "wti",ports => { port => [{ attached_device => $f1, id => $params{apc_port} },]},communication => {ipv4_address => "10.244.83.10", type => "telnet",username => "admin" password => 'admin',});
$t=$hosts[0]->getHostDateTime()
$t=$hosts[0]->thresholdCheckEndTime
$tmpDir = $hosts[0]->createTemporaryDirectory();
$view = $self->vplexGetStorageView($self->{'cluster-1'}->{clusterObj}, $host);
$view->addVirtualVolume(virtual_volumes=>\@vv)
$vj=$hosts->startVjTree(io_mode=>"overwrite",mountpoint=>$mount,reference=>"testIO",level=>1,width=>0,file_count=>1,file_size=>"10GB")
$vj=$hosts[0]->startVjTree(io_mode=>"overwrite",mountpoint=>"$mount".":",reference=>"testIO",level=>1,width=>0,file_count=>1,file_size=>"10GB",pattern=>"ImWriteBigFile",seed=>1)
$vj=$hosts[0]->startVjTree(io_mode=>"overwrite",mountpoint=>$mount,reference=>"testIO",level=>1,width=>0,file_count=>1,file_size=>"10GB")
$vj=$hosts[0]->startVjTree(io_mode=>"overwrite",mountpoint=>$mount,reference=>"testIO",level=>1,width=>0,file_count=>1,file_size=>"10GB",pattern=>"ImWriteBigFile")
$vj=$hosts[0]->startVjTree(io_mode=>"overwrite",mountpoint=>$mount,reference=>"testIO",level=>1,width=>0,file_count=>1,file_size=>"10GB",pattern=>"ImWriteBigFile",seed=>1)
$volumes = $self->vplexCreateVirtualVolume($devices1)
$volumes = $self->vplexCreateVirtualVolume(device=>$devices1)
$vplex = $devices1->[0]->getDevice()
$vplex = $self->{$name}->{vplexObj}
$vplex = $vplexes[0]
$vplex->equals($self->{$name}->{vplexObj})
$vplex->equals($self->{'cluster-1'}->{vplexObj})
$vplex2 = $cluster->getDevice();
$vplex=$vplexes[0]
$vplexes[0]->find(type=>'Migration', criteria => {name=>qr/Vplex/});
$vplexes[0]->waitForPropertyValue(object=>\@dm, property=>'status', value=>'error')
$vplexes[0]->waitForPropertyValue(objects=>\@dm, property=>'status', value=>'error')
$vplexes[1]->waitForPropertyValue(objects=>\@dm, property=>'status', value=>'error')
$vv[]1
$w
$w->run(command=>['cmd', '/c', 'net use * \\10.108.36.179\TestShr10.108.27.62_Cifs0 /USER:Administrator Password123# /PERSISTENT:NO'])
$w->run(command=>['cmd', '/c', 'net use'])
$w->run(command=>['cmd', '/c', 'xcopy Z:\svr3sh1_1396406865\FILES\Funchanged Z:\svr3sh1_1396406865\AUDIT\F1 /Y'])
$w=$hosts[0]
$w=$hosts[2]
$wwn = $lun[0]->getProperty('uid')
$wwn =~ s/://g
%a = $ds[0]->getProperties('id', 'disk_type')
%a= $hosts[0]->getDisks()
%a=$dm->getProperties()
%a=$hosts[0]->run(command=>['sh', '-c', 'uname'])
%a=$hosts[0]->run(command=>['sh', '/c', 'uname'])
%b=$cs->getProperty("domains")
%b=$ds[0]->getProperties('id', 'name')
%ba=$cs->getProperty("domains")
%m = $cs->getDatamoverMountInfo(datamover=>$dm)
%p = $ds[0]->getProperties('id',   'name')
'
($a)=$hosts[0]->dispatch('powerShellPassThrough',command=>'Get-Date')
($br)=$vplexes[0]->find(type=>'Migration', criteria => {name=>qr/BR0/});
($c1)=$p1->find(type=>'cluster')
($cs) = $celerras[0]->find(type=> "CifsService", criteria => {datamover=>"server_3"})
($cs) = $hosts[2]->find(type=> "CifsService", criteria => {datamover=>"server_3"});
($cs)=@celerras
($cs3) = $celerras[0]->find(type=> "CifsService", criteria => {name=>"R96E3S3K3",datamover=>"server_3"})
($dm)=$celerras[0]->find(type => "datamover", criteria => { slot => "3" });
($dm)=$celerras[0]->find(type => "datamover", criteria => { slot => 3 })
($dm)=$cs->find(type=>'DataMover', criteria=>{'name'=>'server_3'})
($dm)=$cs->find(type=>'datamover', criteria=>{'name'=>'server_3'})
($dm)=$vplexes[0]->find(type=>'Migration', criteria => {name=>qr/Vplex/});
($host)=$self->{vnxA}->getAttachedHost()
($p1,$p2)=@vplexes
($sm)=$cs->find(type=>'ServerMount', criteria=>{'name'=>'/server3fs1'})
($sp) =$vnxs[0]->find(type=>"Sp", criteria=>{name=>qr/spa/i})
($sp)=$b->getSps()
($view) = $vplex->find(type=>"StorageView", force_sync =>1, criteria=> {name=> qr/$name/i});
($view) = $vplex->find(type=>"StorageView", force_sync =>1, criteria=> {name=> qr/027/i});
($vol) = $storage[0]->find(type=>'Volume', criteria=>{ system_id=>qr/$wwn/i})
($vol) = $storage[1]->find(type=>'Volume', criteria=>{ system_id=>qr/$wwn/i})
($vol) = $storage[1]->getDevice()->find(type=>'Volume', criteria=>{ system_id=>qr/$wwn/i})
(p1,p2)=@vplexes
@a= $hosts[0]->getDisks()
@a=$cs->getProperty("domains")
@a=$hosts[0]->getDisks()
@a=$hosts[0]->getDisks(partitions=>"==1")
@a== $hosts[0]->getDisks()
@bb = $sp->getBattery()
@bb=$b->find(type)
@bb=$b->find(type=>'Battery')
@bb=$b->find(type=>'Battery',force_sync=>1)
@bb=$b->find(type=>'battery',force_sync=>1)
@bb=$b->find(type=>'battery',force_sync=>1, criteria=>{inserted=>1})
@bb=$b->find(type=>'battery',force_sync=>1, criteria=>{sp=>'spa',programmable_revision=>'6.56'})
@bb=$b->find(type=>'battery',force_sync=>1, criteria=>{sp=>'spa'})
@bb=$b->find(type=>'battery',force_sync=>1, only_new=>1)
@bt = $sp->getBattery()
@c=$p1->find(type=>'cluster')
@cs=$celerras[0]->find(type => "CifsService")
@cs=$celerras[0]->find(type => "CifsService", criteria=>{datamover=>'server_3'})
@d2 = $vplexes[1]->find(type=>'LocalDevice', criteria==>{name=>qr /AutoNewDevice/i})
@d2 = $vplexes[1]->find(type=>'LocalDevice', criteria=>{name=>qr /2dev/i})
@d2 = $vplexes[1]->find(type=>'LocalDevice', criteria=>{name=>qr /AutoNewDevice/i})
@d2 = $vplexes[1]->find(type=>'LocalDevice', criteria=>{name=>qr /Dev/i})
@d2 = $vplexes[1]->find(type=>'LocalDevice', criteria=>{name=>qr /cluster2Dev/i})
@d2 = $vplexes[1]->find(type=>'LocalDevice', criteria=>{name=>qr /cluster2Dev_1/i})
@d2 = $vplexes[1]->find(type=>'LocalDevice', criteria=>{name=>qr /cluster2dev/i})
@d2 = $vplexes[1]->find(type=>'LocalDevice', force_sync=>1,criteria=>{name=>qr /cluster2Dev_1/i})
@disks_NL_SAS=$vnx[0]->getDisk(state=>'unused',vault=>0,kind=>["nl_sas"],technology=>["normal"]);
@disks_flash=$vnxs[0]->getDisk(state=>'unused',vault=>0,kind=>["fc"],technology=>["flash"]);
@disks_flash=$vnxs[0]->getDisk(state=>'unused',vault=>0,kind=>["flash"],technology=>["flash"]);
@disks_flash=$vnxs[0]->getDisk(state=>'unused',vault=>0,kind=>["sata"],technology=>["flash"]);
@disks_flash=$vnxs[0]->getDisk(state=>'unused',vault=>0,kind=>["sata_flash"],technology=>["flash"]);
@dm = $vplexes[0]->find(type=>'Migration', force_sync=>1,criteria => {name=>qr/AutoDev/});
@dm = $vplexes[0]->find(type=>'Migration', force_sync=>1,criteria => {name=>qr/MigrationTest/});
@dm = $vplexes[1]->find(type=>'Migration', force_sync=>1,criteria => {name=>qr/rayTest/});
@dm = $vplexes[1]->find(type=>'Migration', force_sync=>1,criteria=>{name=>qr /raytest/i})
@dm1=$vplexes[1]->find(type=>'Migration', force_sync=>1);
@dm=$vplexes[0]->find(type=>'Migration', force_sync=>1);
@dm=$vplexes[0]->find(type=>'Migration', force_sync=>1,criteria => {name=>qr//});
@ds = $vnxes[0]->getDisk()
@ds = $vnxes[0]->getDisks()
@ds = $vnxs[0]->getDisk()
@ds = $vnxs[0]->getDisk()dd
@ds=      $vnxs[0]->getDisk()
@ds=   $hosts[0]->getDisks()
@ds=$b->find(type=>'Disk',force_sync=>1)
@ds=$hosts[0]->getDisks()
@ds=$vnxs-getDisk()
@ds=$vnxs[0]->getDisk()
@ds=$vnxs[0]->getDisk(state='unused')
@ds=$vnxs[0]->getDisk(state=>'unused')
@ds=$vnxs[0]->getDisk(state=>'unused',vault=>0)
@ds=$vnxs[0]-getDisk()
@es = $vplexes[0]->find(type=>'Extent', force_sync=>1,criteria => {name=>qr/AutoDev/});
@es = $vplexes[0]->find(type=>'Extents', force_sync=>1,criteria => {name=>qr/AutoDev/});
@h = $vnxes[0]->
@h = $vnxes[0]->getAttachedHost()
@h=$celerras[0]->getAttachHost()
@h=$celerras[0]->getAttachedHost()
@h=$vnxe[0]->getAttachedHost()
@h=$vnxes[0]->getAttachedHost()
@ld=$vplexes[0]->find(type=>'LocalDevice', force_sync=>1,criteria => {name=>qr/AutoDev/});
@lun = $vnxs[0]->find(type=>'Lun', criteria=>{name=>qr /ray/i})
@lun = $vnxs[0]->find(type=>'Lun', criteria=>{name=>qr /ray_auto/i})
@lun1 = $vnxs[0]->find(type=>'Lun', criteria=>{name=>qr /63/i})
@lun1 = $vnxs[0]->find(type=>'Lun', criteria=>{name=>qr /631/i})
@lun2 = $vnxs[1]->find(type=>'Lun', criteria=>{name=>qr /336/i})
@lunB = $vnxs[1]->find(type=>'Lun', criteria=>{name=>qr /AutoRay/i})
@p = $switch->getPort(ids=>['A1'])
@p = $switch->getPorts()
@pools = $vnxs[0]->getStoragePool()
@pw = $sw->getPort(ids=>['B1'])
@sps = $vnxs[0]->find(type=>'Sp')
@storage = $self->{'cluster-1'}
@storage = $self->{'cluster-1'}->{clusterObj}->getStorage()
@storage = $self->{'cluster-1'}->{clusterObj}->getStroage()
@vv = $vplex->find(type=>'VitualVolume', criteria=>{name=>qr /AutoNewDevice/i})
@vv = $vplexes[0]->find(type=>'VirtualVolume', criteria=>{name=>qr /AutoNewDevice/i})
@vv = $vplexes[0]->find(type=>'VitualVolume', criteria=>{name=>qr /AutoNewDevice/i})
@vv=$vplexes[0]->find(type=>'VirtualVolume')
@vv=$vplexes[0]->find(type=>'VirtualVolume', criteria => {name=>qr/AutoDev/});
@vv=$vplexes[0]->find(type=>'VirtualVolume', force_syn=>1,criteria => {name=>qr/AutoDev/});
@vv=$vplexes[0]->find(type=>'VirtualVolume', force_sync=>1,criteria => {name=>qr/AutoDev/});
Automatos::Wrapper::Tool::Navisphere
Data::Dumper->dumper([$self])
cat script.txt 
curl: (7) couldn't connect to host
d
d dfd
d list
del /Q  \\10.109.165.34\C$\.filefilter\*
fg
find(type=>'StorageGroup', criteria => {name=>$sgName[$index]});
g
h
history
host
hosts[1]->createIoxBlockSession()
if ($key =~ /(clsuter-\d)/i) {print "ok"}
if ($key =~ /(cluster)/i) {print "ok";}
if ($key =~ /(cluster)/i) {print "ok"}
if ($key =~ /(cluster-\d)/i) { $name = $1; p $self->{$name}->{vplexObj}}
if ($key =~ /(cluster-\d)/i) { $name = $1; print $vplex->equals($self->{$name}->{vplexObj})}
if ($key =~ /(cluster-\d)/i) { print $1}
if ($key =~ /(cluster-\d)/i) {print "ok"}
if ($key =~ /cluster/i) {print "ok";}
if ($vplex.equals($self->{$name}->{vplexObj})) { print "ok";} else {print 'not ok;'}
if (1) {print "ok"}
l
l 
l d
l hosts
l ost
l vnx
l vnxe
list
list 
list all
list device
list hhost
list host
list host 0
ll
ll host
ls
my $name = $host->getHostname();
o
o debug DEBUG
o debug TRACE
o debugddd
o debugg dfd
o debuggg
o depth 1
o depth 100
o depth 4
o deubg TRACE
o sefe
o show
p  $hosts[1]->run(command=>['hostname'])
p $hello
p $host
p $hosts[0]
p $hosts[0]->dispatch('powerShellPassThrough', command=>'Set-Location C:\Windows\System32\Drivers ; get-childitem * -include mpio.sys | foreach-object { \"{0} {1}\" -f $_.Name, [System.Diagnostics.FileVersionInfo]::GetVersionInfo($_).fileversion}')
p $hosts[0]->dispatch('powerShellPassThrough',command=>'Set-Location C:\\Windows\\System32\\Drivers ; get-childitem * -include mpio.sys | foreach-object \'{ \"{0} {1}\" -f $_.Name, [System.Diagnostics.FileVersionInfo]::GetVersionInfo($_).fileversion }\'');
p $hosts[0]->doesPathExist(path=>"C:")
p $hosts[0]->doesPathExist(path=>"C:\\Program Files\\AutomatosRpc")
p $hosts[0]->doesPathExist(path=>"C:\\logs")
p $hosts[0]->doesPathExist(path=>"C:\logs")
p $hosts[0]->doesPathExist(path=>"F:")
p $hosts[0]->getDisks()
p $hosts[0]->initializeDisk(disk=>'5')
p $hosts[0]->initializeDisk(disk=>'5', )
p $hosts[0]->mountCifsFilesystem(export=>"\\\\10.244.248.28\\TestShr_Cifs0",username=>"Administrator",password=>"Password123#")
p $hosts[0]->run(command=>['cmd', '/c', 'ping 10.244.248.28'])
p $lun
p $mount
p $my
p $name
p $p
p $ray
p $ray=5
p $s="et-Location C:\Windows\System32\Drivers ; get-childitem * -include mpio.sys | foreach-object { "{0}`t{1}" -f $_.Name, [System.Diagnostics.FileVersionInfo]::GetVersionInfo($_).fileversion }"
p $s="set-Location C:\Windows\System32\Drivers ; get-childitem * -include mpio.sys | foreach-object { "{0}`t{1}" -f $_.Name, [System.Diagnostics.FileVersionInfo]::GetVersionInfo($_).fileversion }"
p $self
p $self->{$name}->{lun@lun1 = $vnxs[0]->find(type=>'Lun', criteria=>{name=>qr /ray_auto/i})}
p $self->{$name}->{lun}
p $self->{$name}->{vplexObj}
p $self->{'cluster-1'}
p $self->{'cluster-1'}->{vplexObj}
p $sp
p $volumes
p $vplex
p $vplex->equals($self->{$name}->{vplexObj})
p $vplex.equals
p $vplex.queals
p @vv
p devices1
p dispatch
p if ($key =~ /(cluster-\d)/i) { $name = $1; p $self->{$anem}->{vplexObj}}
p if ($key =~ /(cluster-\d)/i) { $name = $1; p $self->{$name}->{vplexObj}}
p if ($key =~ /(cluster-\d)/i) { print $1}
p if (1)
p ref($c)
p ref($self)
p ref(%p)
p ref(\$c)
p ref(\$self)
p ref(\%p)
p scalar(@ds)
p scalar(@hosts)
print $hosts[1]
print $vplex
print if ($key =~ /(cluster-\d)/i) { $name = $1; print $vplex->equals($self->{$name}->{vplexObj})}
q
quit
s
show
storagePoolShow
svn diff automatos-shell.pl 
tl host
use
use Data::Dumper
use automatos-shell
use automatos-shell.pl 
use testCase.pm
vi
x
x  $vnxs[0]->getNtpInfo()
x  = $vnxs[0]->getNtpInfo()
x  if ($key =~ /(cluster-\d)/i) { $name = $1; print $vplex->equals($self->{$name}->{vplexObj})}
x #0
x $
x $1
x $a
x $a[0]
x $b
x $b->find(type=>'LSlot',force_sync=>1)
x $bb[0]->getProperties()
x $bb[1]->getProperties()
x $br->getProperties()
x $c
x $c->{EFT2K3}
x $c->{EFT2K3}->{fqdn}
x $celerras[0]->find(type => "CifsService", criteria=>{datamover=>'server_3'})
x $celerras[0]->getProperty("i18n_mode")
x $celerras[0]->getProperty(i18n_mode)
x $cluster
x $cmd
x $cs
x $cs->find(type=>'datamover', criteria=>{'name'=>'server_3'})
x $cs->getProperties("", )
x $cs->getProperties("fully_qualified_domain_name")
x $cs->getProperties("fully_qualified_domain_name", "name")
x $cs->getProperties()
x $cs->getProperty("")
x $cs->getProperty("domains")
x $cs->getProperty("fully_qualified_domain_name")
x $cs->getProperty("name")
x $cs->{domains}
x $cs[0]->getProperties('i18n_mode')
x $cs[0]->getProperties()
x $d2[1]
x $device1
x $devices
x $devices->[0]
x $devices1
x $devices1->[0]->delete()
x $devices1->[0]->getDevice()
x $devices2
x $dir
x $dir."\\fdfd.txt"
x $dm
x $dm->dumpDnsCache()
x $dm->getDatamoverMountInfo()
x $dm->getProperies()
x $dm->getProperties()
x $dm->getPropertirs()
x $dm->showDns()
x $dm[0]
x $dm[0]->getProperty('status')
x $ds->getProperty('id')
x $ds[0]->getProperties('id',   'name')
x $ds[0]->getProperties('id', 'disk_type')
x $ds[0]->getProperties('id', 'disk_typed')
x $ds[0]->getProperties('id', 'name')
x $ds[0]->getProperty('disk_type')
x $ds[0]->getProperty('id')
x $ds[10]->getProperty('disk_type')
x $ds[20]->getProperty('disk_type')
x $fs[0]->getProperty('disk_type')
x $h0
x $hello
x $hello="fddfdfd"
x $host->dispatch('powerShellPassThrough',command=>$cmd);
x $host->dispatch('powerShellPassThrough',command=>$logCmd);
x $host[0]->addDirectoryToSystemPath(path=>"C:\\Windows\\TEMP\\tmp_1393402712_993514_9916_0")
x $host[0]->getDisks()
x $host[0]->initializeDisk(disk=>'5')
x $host[0]->run(   command=>['net  use'])
x $host[0]->run(command=>['net  use'])
x $hosts->getDisks()
x $hosts->getDisks()Get-PhysicalDisk |Sort Size| FT DeviceId, FriendlyName, CanPool,Size,MediaType -AutoSize
x $hosts->getSystemInfo()
x $hosts->initializeDisk(disk=>$disks[0]->{id},filesystem=>'NTFS');
x $hosts->run(command=>['cmd', '/c', 'net use'])
x $hosts->run(command=>['cmd', '/c'm 'net use'])
x $hosts[0]
x $hosts[0]->$host->run(command=>['cmd', '/c',
x $hosts[0]->createTemporaryDirectory()
x $hosts[0]->dispatch(  'powerShellPassThrough',  command =>$cmd);
x $hosts[0]->dispatch('powerShellPassThrough')
x $hosts[0]->dispatch('powerShellPassThrough',   command=>"");
x $hosts[0]->dispatch('powerShellPassThrough',   command=>"dfdf");
x $hosts[0]->dispatch('powerShellPassThrough',   command=>$cmd);
x $hosts[0]->dispatch('powerShellPassThrough',   command=>);
x $hosts[0]->dispatch('powerShellPassThrough',  command =>$cmd);
x $hosts[0]->dispatch('powerShellPassThrough', command=>"Remove-StoragePool -FriendlyName AutoTierTestPool -Confirm:$false")
x $hosts[0]->dispatch('powerShellPassThrough', command=>"Remove-StoragePool -FriendlyName AutoTierTestPool -Confirm:\$false")
x $hosts[0]->dispatch('powerShellPassThrough', command=>"\$s = Get-StorageSubSystem; New-StoragePool -StorageSubSystemId \$s.UniqueId -FriendlyName AutoTierTestPool -PhysicalDisks (Get-PhysicalDisk -CanPool \$true)")
x $hosts[0]->dispatch('powerShellPassThrough', command=>'$SSD = Get-StorageTier -FriendlyName SSDTier; $HDD = Get-StorageTier -FriendlyName HDDTier; Get-StoragePool AutotierTestPool | New-VirtualDisk -FriendlyName Space1 -ResiliencySettingName Simple -StorageTiers $SSD,$HDD -StorageTierSizes 16GB,16GB')
x $hosts[0]->dispatch('powerShellPassThrough', command=>'$SSD = Get-StorageTier -FriendlyName SSDTier; $HDD = Get-StorageTier -FriendlyName HDDTier; Get-StoragePool AutotierTestPool | New-VirtualDisk -FriendlyName Space1 -ResiliencySettingName Simple -StorageTiers $SSD,$HDD -StorageTierSizes 20GB,20GB')
x $hosts[0]->dispatch('powerShellPassThrough', command=>'$SSD = Get-StorageTier -FriendlyName SSDTier; $HDD = Get-StorageTier -FriendlyName HDDTier; Get-StoragePool AutotierTestPool | New-VirtualDisk -FriendlyName Space1 -ResiliencySettingName Simple StorageTiers $SSD,$HDD -StorageTierSizes 10GB,10GB')
x $hosts[0]->dispatch('powerShellPassThrough', command=>'$s = Get-StorageSubSystem; New-StoragePool -StorageSubSystemId $s.UniqueId -FriendlyName AutoTierTestPool -PhysicalDisks (Get-PhysicalDisk -CanPool $true)')
x $hosts[0]->dispatch('powerShellPassThrough', command=>'Get-PhysicalDisk |Sort Size| FT DeviceId, FriendlyName, CanPool,Size,MediaType -AutoSize')
x $hosts[0]->dispatch('powerShellPassThrough', command=>'Get-StoragePool "AutotierTestPool" | Get-PhysicalDisk | ? FriendlyName -eq "PhysicalDisk4" | Set-PhysicalDisk -MediaType SSD')
x $hosts[0]->dispatch('powerShellPassThrough', command=>'Remove-StoragePool -FriendlyName AutoTierTestPool -Confirm:$false')
x $hosts[0]->dispatch('powerShellPassThrough', command=>'Set-Location C:\Windows\System32\Drivers ; get-childitem * -include mpio.sys | foreach-object { "0 1" -f $_.Name, [System.Diagnostics.FileVersionInfo]::GetVersionInfo($_).fileversion}')
x $hosts[0]->dispatch('powerShellPassThrough', command=>'Set-Location C:\Windows\System32\Drivers ; get-childitem * -include mpio.sys | foreach-object { "{0} {1}" $_.Name, [System.Diagnostics.FileVersionInfo]::GetVersionInfo($_).fileversion}')
x $hosts[0]->dispatch('powerShellPassThrough', command=>'Set-Location C:\Windows\System32\Drivers ; get-childitem * -include mpio.sys | foreach-object { "{0} {1}" -f $_.Name, [System.Diagnostics.FileVersionInfo]::GetVersionInfo($_).fileversion}')
x $hosts[0]->dispatch('powerShellPassThrough', command=>'Set-Location C:\Windows\System32\Drivers ; get-childitem * -include mpio.sys | foreach-object { $_.Name, [System.Diagnostics.FileVersionInfo]::GetVersionInfo($_).fileversion}')
x $hosts[0]->dispatch('powerShellPassThrough', command=>'Set-Location C:\Windows\System32\Drivers ; get-childitem * -include mpio.sys | foreach-object { [System.Diagnostics.FileVersionInfo]::GetVersionInfo($_).fileversion}')
x $hosts[0]->dispatch('powerShellPassThrough', command=>'Set-Location C:\Windows\System32\Drivers ; get-childitem * -include mpio.sys | foreach-object { [System.Diagnostics.FileVersionInfo]::GetVersionInfo($_).fileversion}'])
x $hosts[0]->dispatch('powerShellPassThrough', command=>'Set-Location C:\Windows\System32\Drivers ; get-childitem * -include mpio.sys | foreach-object { [System.Diagnostics.FileVersionInfo]::GetVersionInfo($_).fileversion}}"'])
x $hosts[0]->dispatch('powerShellPassThrough', command=>'Set-Location C:\Windows\System32\Drivers ; get-childitem * -include mpio.sys | foreach-object { [System.Diagnostics.FileVersionInfo]::GetVersionInfo($_).fileversion}}'])
x $hosts[0]->dispatch('powerShellPassThrough', command=>'Set-Location C:\Windows\System32\Drivers ; get-childitem * -include mpio.sys | foreach-object { \"{0} {1}" -f $_.Name, [System.Diagnostics.FileVersionInfo]::GetVersionInfo($_).fileversion}')
x $hosts[0]->dispatch('powerShellPassThrough', command=>'Set-Location C:\Windows\System32\Drivers ; get-childitem * -include mpio.sys | foreach-object { \"{0} {1}\" -f $_.Name, [System.Diagnostics.FileVersionInfo]::GetVersionInfo($_).fileversion}')
x $hosts[0]->dispatch('powerShellPassThrough',command=>"Get-FileStorageTier -VolumeDriveLetter $mount | FT -AutoSize");
x $hosts[0]->dispatch('powerShellPassThrough',command=>"Set-FileStorageTier -FilePath F:\\testDir0\\VcoQuven5T -DesiredStorageTierFriendlyName Space1_SSDTier");
x $hosts[0]->dispatch('powerShellPassThrough',command=>"Set-FileStorageTier -FilePath F:\testDir0\VcoQuven5T -DesiredStorageTierFriendlyName Space1_SSDTier");
x $hosts[0]->dispatch('powerShellPassThrough',command=>"Set-FileStorageTier -FilePath F:\testdir0\ -DesiredStorageTierFriendlyName Space1_SSDTier");
x $hosts[0]->dispatch('powerShellPassThrough',command=>"Set-Location C:\\Windows\\System32\\Drivers ; get-childitem * -include mpio.sys \| foreach-object \'{ "{0} {1}" -f $_.Name, [System.Diagnostics.FileVersionInfo]::GetVersionInfo($_).fileversion }\'");
x $hosts[0]->dispatch('powerShellPassThrough',command=>"Set-Location C:\\Windows\\System32\\Drivers ; get-childitem * -include mpio.sys \| foreach-object \'{ \"{0} {1}\" -f $_.Name, [System.Diagnostics.FileVersionInfo]::GetVersionInfo($_).fileversion }\'");
x $hosts[0]->dispatch('powerShellPassThrough',command=>"Set-Location C:\\Windows\\System32\\Drivers ; get-childitem * -include mpio.sys | foreach-object \'{ "{0} {1}" -f $_.Name, [System.Diagnostics.FileVersionInfo]::GetVersionInfo($_).fileversion }\'");
x $hosts[0]->dispatch('powerShellPassThrough',command=>$cmd);
x $hosts[0]->dispatch('powerShellPassThrough',command=>$cmd)ddd;
x $hosts[0]->dispatch('powerShellPassThrough',command=>$logCmd);
x $hosts[0]->dispatch('powerShellPassThrough',command=>'Get-FileStorageTier -VolumeDriveLetter $mount | FT -AutoSize');
x $hosts[0]->dispatch('powerShellPassThrough',command=>'Get-FileStorageTier -VolumeDriveLetter F | FT -AutoSize');
x $hosts[0]->dispatch('powerShellPassThrough',command=>'Get-FileStorageTier -VolumeDriveLetter F: | FT -AutoSize');
x $hosts[0]->dispatch('powerShellPassThrough',command=>'Get-FileStorageTier -VolumeDriveLetter F:\ | FT -AutoSize');
x $hosts[0]->dispatch('powerShellPassThrough',command=>'Get-StoragePool | Remove-StoragePool -Confirm:$false');
x $hosts[0]->dispatch('powerShellPassThrough',command=>'Get-WinEvent -LogName system | Out-File C:\\Windows\\TEMP\\tmp_1390442483_698846_515_0\\fdfd.txt');
x $hosts[0]->dispatch('powerShellPassThrough',command=>'Get-WinEvent -LogName system | Out-File');
x $hosts[0]->dispatch('powerShellPassThrough',command=>'Set-Location C:\Windows\System32\Drivers ; get-childitem * -include mpio.sys | foreach-object "{ "{0} {1}" -f $_.Name, [System.Diagnostics.FileVersionInfo]::GetVersionInfo($_).fileversion }"');
x $hosts[0]->dispatch('powerShellPassThrough',command=>'Set-Location C:\Windows\System32\Drivers ; get-childitem * -include mpio.sys | foreach-object { "{0} {1}" -f $_.Name, [System.Diagnostics.FileVersionInfo]::GetVersionInfo($_).fileversion }');
x $hosts[0]->dispatch('powerShellPassThrough',command=>'Set-Location C:\\Windows\\System32\\Drivers ; get-childitem * -include mpio.sys | foreach-object \'{ "{0} {1}" -f $_.Name, [System.Diagnostics.FileVersionInfo]::GetVersionInfo($_).fileversion }\'');
x $hosts[0]->dispatch('powerShellPassThrough',command=>'Set-Location C:\\Windows\\System32\\Drivers ; get-childitem * -include mpio.sys | foreach-object \'{ "{0} {1}" -f $_.Name, [System.Diagnostics.FileVersionInfo]::GetVersionInfo(\$_).fileversion }\'');
x $hosts[0]->dispatch('powerShellPassThrough',command=>'Set-Location C:\\Windows\\System32\\Drivers ; get-childitem * -include mpio.sys | foreach-object \'{ \"{0} {1}\" -f $_.Name, [System.Diagnostics.FileVersionInfo]::GetVersionInfo($_).fileversion }"');
x $hosts[0]->dispatch('powerShellPassThrough',command=>'Set-Location C:\\Windows\\System32\\Drivers ; get-childitem * -include mpio.sys | foreach-object \'{ \"{0} {1}\" -f $_.Name, [System.Diagnostics.FileVersionInfo]::GetVersionInfo($_).fileversion }');
x $hosts[0]->dispatch('powerShellPassThrough',command=>'Set-Location C:\\Windows\\System32\\Drivers ; get-childitem * -include mpio.sys| foreach-object \'{ \"{0}\" -f $_.Name  }\'');
x $hosts[0]->dispatch('powerShellPassThrough',command=>'Set-Location C:\\Windows\\System32\\Drivers ; get-childitem * | foreach-object \'{ \"{0} {1}\" -f $_.Name, [System.Diagnostics.FileVersionInfo]::GetVersionInfo($_).fileversion }\'');
x $hosts[0]->dispatch('powerShellPassThrough',command=>'Set-Location C:\\Windows\\System32\\Drivers ; get-childitem * | foreach-object \'{ \"{0}\" -f $_.Name  }\'');
x $hosts[0]->dispatch('powerShellPassThrough',file=>"Set-Location C:\\Windows\\System32\\Drivers ; get-childitem * -include mpio.sys \| foreach-object \'{ \"{0} {1}\" -f $_.Name, [System.Diagnostics.FileVersionInfo]::GetVersionInfo($_).fileversion }\'");
x $hosts[0]->dispatch('storagePoolShow')
x $hosts[0]->dispatch('storagePoolShow')$hosts[0]->run(command=>['cmd', '/c', "powershell $s = Get-StorageSubSystem; New-StoragePool -StorageSubSystemId $s.UniqueId -FriendlyName AutoTierTestPool -PhysicalDisks (Get-PhysicalDisk -CanPool $true)"])
x $hosts[0]->dispatch('storagePoolShow', object_id=>"AutoTierTestPool")
x $hosts[0]->getDisk()
x $hosts[0]->getDisks(   partitions    =>'==0')
x $hosts[0]->getDisks('fdfd')
x $hosts[0]->getDisks()
x $hosts[0]->getDisks(parition=>"!=0")
x $hosts[0]->getDisks(partition=>"!=0")
x $hosts[0]->getDisks(partitions=>" >=1")
x $hosts[0]->getDisks(partitions=>"!=0")
x $hosts[0]->getDisks(partitions=>"==0")
x $hosts[0]->getDisks(partitions=>"==1")
x $hosts[0]->getDisks(partitions=>">0")
x $hosts[0]->getDisks(partitions=>">>0")
x $hosts[0]->getDisks(partitions=>'==0')
x $hosts[0]->getPropertyShowScript()
x $hosts[0]->getSystemInfo()
x $hosts[0]->hostname()
x $hosts[0]->initializeDisk();
x $hosts[0]->initializeDisk(disk=>$disks[0]->{id},filesystem=>'NTFS');
x $hosts[0]->initializeDisk(disk=>'5')
x $hosts[0]->killProcess(process_name=>"defrag", force=>1)
x $hosts[0]->killProcess(process_name=>"defrag.exe", force=>1)
x $hosts[0]->loginCifsServer(export=>"\\\\10.109.165.34", domain=>"EFT2K3", username => "cifsuser", password => "cifsuser");
x $hosts[0]->mountCifsFilesystem(export=>"\\\\10.244.248.28\\TestShr_Cifs0",username=>"Administrator",password=>"Password123#")
x $hosts[0]->powerShellPassThrough()
x $hosts[0]->readFile(path=>"C:\\Windows\\TEMP\\tmp_1390442483_698846_515_0\\fdfd.txt")
x $hosts[0]->reboot()
x $hosts[0]->run(   command => ['sh',   '-c','uname -a']   )
x $hosts[0]->run(   command=>['sh','-c','uname -a'])
x $hosts[0]->run('cmd', '/c', 'net use')
x $hosts[0]->run('net use')
x $hosts[0]->run(command => ['sh','-c','uname -a']   )
x $hosts[0]->run(command => ['sh','-c','uname -a'])
x $hosts[0]->run(command('cmd', '/c', 'net list')
x $hosts[0]->run(command=>'cmd', '/c', 'net use')
x $hosts[0]->run(command=>["Get-PhysicalDisk -CanPool true"])
x $hosts[0]->run(command=>["Get-PhysicalDisk"])
x $hosts[0]->run(command=>['cmd', '/c', "Get-PhysicalDisk -CanPool 1"])
x $hosts[0]->run(command=>['cmd', '/c', "Get-StorageSubSystem"])
x $hosts[0]->run(command=>['cmd', '/c', "Remove-StoragePool -FriendlyName AutotierTestPool"])
x $hosts[0]->run(command=>['cmd', '/c', "net list"])
x $hosts[0]->run(command=>['cmd', '/c', "net use \\R96E3EFT2K3 /USER:EFT2K3\cifsuser cifsuser"])
x $hosts[0]->run(command=>['cmd', '/c', "net use \\\\10.109.165.34\\svr3sh1 /USER:EFT2K3\\cifsuser cifsuser"])
x $hosts[0]->run(command=>['cmd', '/c', "net use \\\\10.244.214.30\\svr3sh1 /USER:EFT2K3\\cifsuser cifsuser"])
x $hosts[0]->run(command=>['cmd', '/c', "net use \\\\R96E3EFT2K3 /USER:EFT2K3\cifsuser cifsuser"])
x $hosts[0]->run(command=>['cmd', '/c', "net use \\\\R96E3EFT2K3\\svr3sh1 /USER:EFT2K3\\cifsuser cifsuser"])
x $hosts[0]->run(command=>['cmd', '/c', "net use \\\\R96E3EFT2K3\\svr3sh1 /USER:EFT2K3\cifsuser cifsuser"])
x $hosts[0]->run(command=>['cmd', '/c', "net"])
x $hosts[0]->run(command=>['cmd', '/c', "powershell $s = Get-StorageSubSystem; New-StoragePool -StorageSubSystemId $s.UniqueId -FriendlyName AutoTierTestPool -PhysicalDisks (Get-PhysicalDisk -CanPool $true)"])
x $hosts[0]->run(command=>['cmd', '/c', "powershell $s = Get-StorageSubSystem; New-StoragePool -StorageSubSystemId $s.UniqueId -FriendlyName AutoTierTestPool -PhysicalDisks (Get-PhysicalDisk -CanPool \$true)"])
x $hosts[0]->run(command=>['cmd', '/c', "powershell 'Get-WinEvent -LogName system | Out-File $dir\\a.txt"])
x $hosts[0]->run(command=>['cmd', '/c', "powershell -command \"& {$s = Get-StorageSubSystem; New-StoragePool -StorageSubSystemId $s.UniqueId -FriendlyName AutoTierTestPool -PhysicalDisks (Get-PhysicalDisk -CanPool \$true) }\""])
x $hosts[0]->run(command=>['cmd', '/c', "powershell -command \"& {Set-Location C:\\Windows\\System32\\Drivers ; get-childitem * -include mpio.sys |foreach-object '{ \"{0} {1}\" -f \$_.Name, [System.Diagnostics.FileVersionInfo]::GetVersionInfo(\$_).fileversion}' }\""]);
x $hosts[0]->run(command=>['cmd', '/c', "powershell -command \"& {\$s = Get-StorageSubSystem; New-StoragePool -StorageSubSystemId $s.UniqueId -FriendlyName AutoTierTestPool -PhysicalDisks (Get-PhysicalDisk -CanPool \$true) }\""])
x $hosts[0]->run(command=>['cmd', '/c', "powershell -command \"& {\$s = Get-StorageSubSystem; New-StoragePool -StorageSubSystemId \$s.UniqueId -FriendlyName AutoTierTestPool -PhysicalDisks (Get-PhysicalDisk -CanPool \$true) }\""])
x $hosts[0]->run(command=>['cmd', '/c', "powershell -command \"& {\$s = Get-StorageSubSystem; New-StoragePool -StorageSubSystemId \$s.UniqueId -FriendlyName AutoTierTestPool -PhysicalDisks (Get-PhysicalDisk -CanPool \$true\) }\""])
x $hosts[0]->run(command=>['cmd', '/c', "powershell -command \"& {\$s = Get-StorageSubSystem; New-StoragePool -StorageSubSystemId \$s.UniqueId -FriendlyName AutoTierTestPool -PhysicalDisks \(Get-PhysicalDisk -CanPool \$true\) }\""])
x $hosts[0]->run(command=>['cmd', '/c', "powershell -command \"& {\$s = Get-StorageSubSystem; New-StoragePool -StorageSubSystemId \$s.UniqueId -FriendlyName AutoTierTestPool -PhysicalDisks \(Get-PhysicalDisk -CanPool \$true\) }\""])x $hosts[0]->run(command=>
x $hosts[0]->run(command=>['cmd', '/c', "powershell -command \' & { $s = Get-StorageSubSystem; New-StoragePool -StorageSubSystemId $s.UniqueId -FriendlyName AutoTierTestPool -PhysicalDisks (Get-PhysicalDisk -CanPool $true) }\'"])
x $hosts[0]->run(command=>['cmd', '/c', "powershell Get-PhysicalDisk -CanPool 1"])
x $hosts[0]->run(command=>['cmd', '/c', "powershell Get-PhysicalDisk -CanPool \$true"])
x $hosts[0]->run(command=>['cmd', '/c', "powershell Get-PhysicalDisk -CanPool"])
x $hosts[0]->run(command=>['cmd', '/c', "powershell Get-StorageSubSystem"])
x $hosts[0]->run(command=>['cmd', '/c', "powershell Get-StorageSubSystem;dir"])
x $hosts[0]->run(command=>['cmd', '/c', "powershell Get-WinEvent -LogName system | Out-File $dir\\a.txt"])
x $hosts[0]->run(command=>['cmd', '/c', 'FileFiltering.exe r96e-3cs0 server_3 EFT2K3 10.109.165.34 10.109.165.35 iShare12080 notIShare12080 1 5 1 NO'],directory=>"C:\\Users\\cifsuser\\AppData\\Local\\Temp\\tmp_1393906922_664605_12080_0")
x $hosts[0]->run(command=>['cmd', '/c', 'Space1'])
x $hosts[0]->run(command=>['cmd', '/c', 'copy /Y C:\\Windows\\TEMP\\tmp_1393402712_993514_9916_0\\lgtst.exe C:\\Perl64\\bin'])
x $hosts[0]->run(command=>['cmd', '/c', 'dir C:'])
x $hosts[0]->run(command=>['cmd', '/c', 'dir C:\'])
x $hosts[0]->run(command=>['cmd', '/c', 'dir C:\\Users\\cifsuser\\AppData\\Local\\Temp\\tmp_1393906922_664605_12080_0'])
x $hosts[0]->run(command=>['cmd', '/c', 'dir D:'])
x $hosts[0]->run(command=>['cmd', '/c', 'dir E:'])
x $hosts[0]->run(command=>['cmd', '/c', 'dir F:'])
x $hosts[0]->run(command=>['cmd', '/c', 'dir F:\'])
x $hosts[0]->run(command=>['cmd', '/c', 'ping r96e-3cs0'])
x $hosts[0]->run(command=>['cmd', '/c', 'powershell -ImportSystemModules -command "&{ Set-Location C:\Windows\System32\Drivers ; get-childitem * -include mpio.sys | foreach-object  $_.Name}"'])
x $hosts[0]->run(command=>['cmd', '/c', 'powershell -ImportSystemModules -command "&{ Set-Location C:\Windows\System32\Drivers ; get-childitem * -include mpio.sys | foreach-object Out-Host $_.Name}"'])
x $hosts[0]->run(command=>['cmd', '/c', 'powershell -ImportSystemModules -command "&{ Set-Location C:\Windows\System32\Drivers ; get-childitem * -include mpio.sys | foreach-object Write-Verbose $_.Name}"'])
x $hosts[0]->run(command=>['cmd', '/c', 'powershell -ImportSystemModules -command "&{ Set-Location C:\Windows\System32\Drivers ; get-childitem * -include mpio.sys | foreach-object { "{0} {1}" $_.Name, [System.Diagnostics.FileVersionInfo]::GetVersionInfo($_).fileversion}}"'])
x $hosts[0]->run(command=>['cmd', '/c', 'powershell -ImportSystemModules -command "&{ Set-Location C:\Windows\System32\Drivers ; get-childitem * -include mpio.sys | foreach-object { "{0} {1}" -f $_.Name, [System.Diagnostics.FileVersionInfo]::GetVersionInfo($_).fileversion}}"'])
x $hosts[0]->run(command=>['cmd', '/c', 'powershell -ImportSystemModules -command "&{ Set-Location C:\Windows\System32\Drivers ; get-childitem * -include mpio.sys | foreach-object { $_.Name, [System.Diagnostics.FileVersionInfo]::GetVersionInfo($_).fileversion}}"'])
x $hosts[0]->run(command=>['cmd', '/c', 'powershell -ImportSystemModules -command "&{ Set-Location C:\Windows\System32\Drivers ; get-childitem * -include mpio.sys | foreach-object { $_.Name}}"'])
x $hosts[0]->run(command=>['cmd', '/c', 'powershell -ImportSystemModules -command "&{ Set-Location C:\Windows\System32\Drivers ; get-childitem * -include mpio.sys | foreach-object { Out-Host $_.Name}}"'])
x $hosts[0]->run(command=>['cmd', '/c', 'powershell -ImportSystemModules -command "&{ Set-Location C:\Windows\System32\Drivers ; get-childitem * -include mpio.sys | foreach-object { [System.Diagnostics.FileVersionInfo]::GetVersionInfo($_).fileversion}}"'])
x $hosts[0]->run(command=>['cmd', '/c', 'powershell -ImportSystemModules -command "&{ Set-Location C:\Windows\System32\Drivers ; get-childitem * -include mpio.sys | foreach-object { \{0\} \{1\} -f $_.Name, [System.Diagnostics.FileVersionInfo]::GetVersionInfo($_).fileversion}}"'])
x $hosts[0]->run(command=>['cmd', '/c', 'powershell -ImportSystemModules -command "&{ Set-Location C:\Windows\System32\Drivers ; get-childitem * -include mpio.sys | foreach-object { {0} {1} -f $_.Name, [System.Diagnostics.FileVersionInfo]::GetVersionInfo($_).fileversion}}"'])
x $hosts[0]->run(command=>['cmd', '/c', 'powershell -ImportSystemModules -command "&{ Set-Location C:\Windows\System32\Drivers ; get-childitem * -include mpio.sys }"'])
x $hosts[0]->run(command=>['cmd', '/c', 'powershell -ImportSystemModules -command &"{ Set-Location C:\Windows\System32\Drivers ; get-childitem * -include mpio.sys | foreach-object Write-Verbose $_.Name}"'])
x $hosts[0]->run(command=>['cmd', '/c', 'powershell -ImportSystemModules -command { Set-Location C:\Windows\System32\Drivers ; get-childitem * -include mpio.sys | foreach-object Write-Verbose $_.Name}'])
x $hosts[0]->run(command=>['cmd', '/c', 'powershell -ImportSystemModules -command { Set-Location C:\Windows\System32\Drivers ; get-childitem * -include mpio.sys| foreach-object Write-Verbose $_.Name'])
x $hosts[0]->run(command=>['cmd', '/c', 'powershell Get-WinEvent -LogName system | Out-File $dir\\a.txt'])
x $hosts[0]->run(command=>['cmd', '/c', 'set'])
x $hosts[0]->run(command=>['cmd', '/c', Get-StorageSubSystem])
x $hosts[0]->run(command=>['cmd', '/c', powershell -ImportSystemModules -command &{ Set-Location C:\Windows\System32\Drivers ; get-childitem * -include mpio.sys| foreach-object '{ \"{0}\" -f $_.Name  }'])
x $hosts[0]->run(command=>['cmd', '/c','net use * /delete /y'])
x $hosts[0]->run(command=>['cmd', '/c','net use'])
x $hosts[0]->run(command=>['net use'])
x $hosts[0]->run(command=>['sh', '-c',   'ls'])
x $hosts[0]->run(command=>['sh', '-c', "cp -fa /root/test_smb3/TEG/serve.out /root/test_smb3/TEG/tmp/"])
x $hosts[0]->run(command=>['sh','-c','uname -a'])
x $hosts[0]->run(command=>['uname -a'])
x $hosts[0]->run(command=>[net use''])
x $hosts[0]->run(commands=>['sh', '-c',   'ls'])
x $hosts[0]->run(commmands=>['cmd', '/c', 'net use Q: delete /y'])
x $hosts[0]->spatch('powerShellPassThrough',command=>$cmd);
x $hosts[0]->unmountCifsFilesystem()
x $hosts[0]->unmountCifsFilesystem(mountpoint=>"Q")
x $hosts[0]->unmountCifsFilesystem(mountpoint=>"Q", export=>"\\\\10.244.205.92\\TestShr10.244.10.142_Cifs9")
x $hosts[0]->unmountCifsFilesystem(mountpoint=>"Q:")
x $hosts[0]->unmountCifsFilesystem(mountpoint=>"Y", export=>"\\\\10.109.165.34\\svr3sh1")
x $hosts[0]->unmountCifsFilesystem(mountpoint=>"Y:", export=>"\\\\10.109.165.34\\svr3sh1")
x $hosts[0]->unmountCifsFilesystem(mountpoint=>"Z:", export=>"\\\\10.109.165.34\\svr3sh1")
x $hosts[0]->x $hosts[0]->run(command=>['cmd', '/c', "Get-StorageSubSystem"])
x $hosts[0]_
x $hosts[0ispatch('powerShellPassThrough',command=>$cmd);
x $hosts[1]->killProcess(process_name=>"vjtree", force=>1);
x $hosts[1]->killProcess(process_name=>"vjtree.exe", force=>1);
x $hosts[1]->mountCifsFilesystem(  export=>"\\\\10.244.248.28\\TestShr_Cifs0",username=>"Administrator",passdfdfdword=>"Password123#")
x $hosts[1]->reboot()
x $hosts[1]->rescanDisks()
x $hosts[1]->run(command=>['cmd', '/c', 'FileFiltering.exe r96e-3cs0 server_3 EFT2K3 10.109.165.34 10.109.165.35 iShare12080 notIShare12080 1 5 1 NO',directory=>"C:\Users\cifsuser\AppData\Local\Temp\tmp_1393906922_664605_12080_0"])
x $hosts[1]->run(command=>['cmd', '/c', 'dir C:\\Users\\cifsuser\\AppData\\Local\\Temp\\tmp_1393906922_664605_12080_0'])
x $hosts[1]->run(command=>['cmd', '/c', 'dir c:\\tmp_1393906922_664605_12080_0'])
x $hosts[1]->run(command=>['cmd', '/c', 'net use'])
x $hosts[1]->run(command=>['cmd', '/c', 'powershell Get-Date'])
x $hosts[1]->run(command=>['cmd', '/c','dir Y:'])
x $hosts[1]->run(command=>['cmd', '/c','dir Y:\src'])
x $hosts[1]->run(command=>['cmd', '/c','dir Z:\src'])
x $hosts[1]->run(command=>['cmd', '/c','net use'])
x $hosts[1]->run(command=>['cmd', '/c','vjtree.exe -W -o -d Y: -r src -l 0 -w 0 -p IAMWritingFile -S 1 -n 10 -s 1258291.200000 -i 524288'])
x $hosts[1]->run(command=>['hostname'])
x $hosts[1]->run(command=>['net use'])
x $hosts[1]->run(command=>['sh', '-c', $ curl -d '{"mount_path":"\\\\10.108.127.10\\cifs00", "username":"administrator", "password":"Password123!"}' 10.10.37.191/api/instances/syncpoint/2538744/action/map -v])
x $hosts[1]->run(command=>['sh', '-c', 'curl -d '{"mount_path":"\\\\10.108.127.10\\cifs00", "username":"administrator", "password":"Password123!"}' 10.10.37.191/api/instances/syncpoint/2538744/action/map -v'])
x $hosts[1]->run(commnad=>['net use'])
x $hosts[2]->_validatePath()
x $hosts[2]->_validatePath(path=>"C:\")
x $hosts[2]->_validatePath(path=>"C:\test")
x $hosts[2]->deleteDirectory()
x $hosts[2]->deleteDirectory(path=>"\\\\10.109.165.34\\C$\\.filefilter\\*")
x $hosts[2]->deleteDirectory(path=>"\\\\10.109.165.34\\C\$\\.filefilter\\*")
x $hosts[2]->deleteDirectory(path=>\\\\10.109.165.34\\C$\\.filefilter\\*)
x $hosts[2]->loginCifsServer(export=>"\\\\10.109.165.34", domain=>"EFT2K3", username => "cifsuser", password => "cifsuser");
x $hosts[2]->run(command=>['cmd', '/c', "del /Q \\\\10.109.165.34\\C\$\\.filefilter\\*"])
x $hosts[2]->run(command=>['cmd', '/c', 'dir \\\\10.109.165.34\\C$\\.filefilter\\*'])
x $hosts[2]->run(command=>['cmd', '/c', 'net use   '])
x $hosts[2]->run(command=>['cmd', '/c', 'net use  \\\\10.109.165.34\\IPC$ /USER:EFT2K3\cifsuser cifsuser '])
x $hosts[2]->run(command=>['cmd', '/c', 'net use * \\\\10.109.165.34\\IPC\$ /USER:EFT2K3\cifsuser cifsuser /PERSISTENT:NO'])
x $hosts[2]->run(command=>['cmd', '/c', 'net use * delete /y'])
x $hosts[2]->run(command=>['cmd', '/c', 'net use /delete \\10.109.165.34\IPC$ /USER:EFT2K3\cifsuser cifsuser /y'])
x $hosts[2]->run(command=>['cmd', '/c', 'net use /delete \\\\10.109.165.34\\IPC$ /y'])
x $hosts[2]->run(command=>['cmd', '/c', 'net use X: /delete /y'])
x $hosts[2]->run(command=>['cmd', '/c', 'net use Y: /delete /y'])
x $hosts[2]->run(command=>['cmd', '/c', 'net use \\\\10.109.165.34\\IPC$ delete /y  '])
x $hosts[2]->run(command=>['cmd', '/c', 'net use delete * /y'])
x $hosts[2]->run(command=>['cmd', '/c', 'net use delete Y: /y'])
x $hosts[2]->run(command=>['cmd', '/c', 'net use delete \\10.109.165.34\IPC$ /USER:EFT2K3\cifsuser cifsuser /y'])
x $hosts[2]->run(command=>['cmd', '/c', 'net use delete \\\\10.109.165.34\\IPC$ /USER:EFT2K3\cifsuser cifsuser /y'])
x $hosts[2]->run(command=>['cmd', '/c', 'net use delete \\\\10.109.165.34\\IPC$ /y'])
x $hosts[2]->run(command=>['cmd', '/c', 'net use deleye Y:'])
x $hosts[2]->run(command=>['cmd', '/c', 'net use z: /delete /y'])
x $hosts[2]->run(command=>['cmd', '/c', 'net use'])
x $hosts[2]->run(command=>['cmd', '/c', 'net useX: /delete /y'])
x $hosts[3]->run(command=>['sh', '-c', "cp -fa /root/test_smb3/TEG/serve.out /root/test_smb3/TEG/tmp/"])
x $hosts[3]->run(command=>['sh', '-c', "ls /root/test_smb3/TEG/tmp/"])
x $hosts[3]->run(command=>['sh', '-c', "rm /root/test_smb3/TEG/tmp/*"])
x $hosts[3]->run(command=>['sh', '-c', "test -e /root/test_smb3/TEG/tmp/serve.out"])
x $hostss[0]->run(command=>['cmd', '/c', 'net use \\R96E3EFT2K3 /USER:EFT2K3\cifsuser cifsuser'])
x $iox
x $lun
x $lun[0]
x $my->getProperties()
x $name
x $p->run(command=>['cmd', '/c', 'net use'])
x $p1
x $p1=>getPropries()
x $ray
x $self
x $self->vplex2CluserName($self->{vplexA})
x $self->vplex2CluserName($vplex)
x $self->vplex2ClusterName($self->{vplexC})
x $self->vplex2ClusterName($vplex)
x $self->vplex2ClusterName($vplexd)
x $self->{'clsuter-1'}
x $self->{'cluster-1'}
x $self->{'cluster-1'}->{clsuterObj}
x $self->{'cluster-1'}->{clusterObj}
x $self->{'cluster-1'}->{vplexObj}
x $self->{'cluster-2'}->{volume}
x $self->{clsuter-1}
x $self->{cluster-1}
x $self->{vnxA}->getAttachedHost()
x $sp
x $sp->getBattery()
x $sp->getHostObject()->{ipv4_address}
x $sp->{ip_address}
x $sp->{ipv4_address}
x $sps[0]->getProperties()
x $storage[0]
x $storage[1]
x $storage[1]->getDevice()
x $sw
x $sw = Automatos::Device::Switch->discover(type => "power", model => "wti",ports => { port => [{ attached_device => $f1, id => "B1" },]},communication => {ipv4_address => "10.244.83.10", type => "telnet",username => "admin",password => "admin",persist_connection=>0});
x $switch
x $tmpdir
x $view
x $vj->getStatus()
x $vj->stop()
x $vj->stopIo()
x $vnxe[0]->getAttachedHost()
x $vnxes[0]
x $vnxes[0]->getAttachedHost()
x $vnxs[0]->find(type=>"Sp", criteria=>{name=>qr/spa/i})
x $vnxs[0]->find(type=>'Sp')
x $vnxs[0]->getDisk()
x $vnxs[0]->getDisks()
x $vnxs[0]->getModel()
x $vnxs[0]->getSps()
x $vol
x $vplex
x $vplex->equals($self->{'cluster-1'}->{vplexObj})
x $vplexes[0]->waitForPropertyValue(object=>\@dm, property=>'status', value=>'error')
x $vv
x $vv[0]
x $vv[0]->getProperties()
x $vv[2]->getProperties()
x $vv[]->getProperties()
x $w->copyFile(source=>"Y:\\svr3sh1_1396407271\\FILES\\Funchanged", destination=>"Y:\\svr3sh1_1396407271\\AUDIT\\F1")
x $w->copyFile(source=>"Y:\\svr3sh1_1396407271\\FILES\\Funchanged", destination=>"Y:\\svr3sh1_1396407271\\AUDIT\\F2")
x $w->copyFile(source=>"Y:\\svr3sh1_1396407271\\FILES\\Funchanged", destination=>"Y:\\svr3sh1_1396407271\\AUDIT\\F3")
x $w->copyFile(source=>"Y:\\svr3sh1_1396407271\\FILES\\Funchanged", destination=>"Y:\\svr3sh1_1396407271\\AUDIT\\F4")
x $w->copyFile(source=>"Y:\svr3sh1_1396407271\FILES\Funchanged", destination=>"Y:\svr3sh1_1396407271\AUDIT\F1")
x $w->copyFile(source=>"Z:\\svr3sh1_1396407271\\FILES\\Funchanged", destination=>"Z:\\svr3sh1_1396407271\\AUDIT\\F10")
x $w->copyFile(source=>'Z:\svr3sh1_1396407271\FILES\Funchanged', destination=>'Z:\svr3sh1_1396407271\AUDIT\F11')
x $w->run(command=>['cmd', '/c', 'dir U'])
x $w->run(command=>['cmd', '/c', 'dir Y:\\svr3sh1_1396407271\\AUDIT'])
x $w->run(command=>['cmd', '/c', 'dir Y:\svr3sh1_1397116191\FILES'])
x $w->run(command=>['cmd', '/c', 'dir Z'])
x $w->run(command=>['cmd', '/c', 'dir Z:'])
x $w->run(command=>['cmd', '/c', 'dir Z:\\svr3sh1_1396406865'])
x $w->run(command=>['cmd', '/c', 'dir Z:\\svr3sh1_1396407271\\AUDIT'])
x $w->run(command=>['cmd', '/c', 'dir Z:\svr3sh1_1396407271\AUDIT'])
x $w->run(command=>['cmd', '/c', 'net use '])
x $w->run(command=>['cmd', '/c', 'net use * /delete /y'])
x $w->run(command=>['cmd', '/c', 'net use * \\10.108.36.179\TestShr10.108.27.62_Cifs0 /USER:Administrator Password123# /PERSISTENT:NO'])
x $w->run(command=>['cmd', '/c', 'net use * \\\\10.109.165.34\\svr3sh1 /USER:EFT2K3\cifsuser cifsuser /PERSISTENT:NO'])
x $w->run(command=>['cmd', '/c', 'net use U: /delete /y'])
x $w->run(command=>['cmd', '/c', 'net use delete * /y'])
x $w->run(command=>['cmd', '/c', 'net use delete U /y'])
x $w->run(command=>['cmd', '/c', 'net use delete U: /y'])
x $w->run(command=>['cmd', '/c', 'net use delete V /y'])
x $w->run(command=>['cmd', '/c', 'net use'])
x $w->run(command=>['cmd', '/c', 'xcopy Y:\\svr3sh1_1396407271\\FILES\\1GB Y:\\svr3sh1_1396407271\\FILES\\a /y'])
x $w->run(command=>['cmd', '/c', 'xcopy Y:\\svr3sh1_1396407271\\FILES\\Funchanged Y:\\svr3sh1_1396407271\\AUDIT\\F1 /Y'])
x $w->run(command=>['cmd', '/c', 'xcopy Y:\\svr3sh1_1396407271\\FILES\\Funchanged Y:\\svr3sh1_1396407271\\FILES\\a /y'])
x $w->run(command=>['cmd', '/c', 'xcopy Y:\\svr3sh1_1396407271\\FILES\\Funchanged'])
x $w->run(command=>['cmd', '/c', 'xcopy Y:\\svr3sh1_1396407271\\FILES\\ray.txt Y:\\svr3sh1_1396407271\\FILES\\a /y'])
x $w->run(command=>['cmd', '/c', 'xcopy Z:\svr3sh1_1396406865\FILES\Funchanged Z:\svr3sh1_1396406865\AUDIT\F1 /Y'])
x $wwn
x %,
x %a
x 0
x 1
x @a
x @a[0]
x @bb
x @bb@bb=$b->find(type=>'battery',force_sync=>1)
x @bt = $sp->getBattery()
x @cs
x @cs=$celerras[0]->find(type => "CifsService", criteria=>{datamover=>'server_3'})
x @d2
x @dm
x @ds
x @h
x @hosts
x @hosts[0]->run(command=>['sh', '-c',   'ls'])
x @ld
x @lun
x @lun1
x @storage
x @vnxes
x @vv
x dispatch('powerShellPassThrough',   command=>"");
x dispatch('powerShellPassThrough',command=>$cmd);
x dm
x if ($key =~ /(cluster-\d)/i) { $name = $1; print $self->{$name}->{vplexObj}}
x if ($key =~ /(cluster-\d)/i) { $name = $1; print $vplex->equals($self->{$name}->{vplexObj})}
x if ($key =~ /(cluster-\d)/i) {print "ok $1";}
x if ($key =~ /(cluster-\d)/i) {print "ok";}
x if ($key =~ /cluster/i) {print "ok";}
x if ($vplex->equals($self->{$name}->{vplexObj})) { print "ok";} else {print 'not ok;'}
x if ($vplex.equals($self->{$name}->{vplexObj})) { print "ok";} else {print 'not ok;'}
x if ($vplex.equals($self->{$name}->{vplexObj})) { print "ok"}
x if ($vplex.equals($self->{$name}->{vplexObj})) { print "ok"} else {print 'not ok'}
x if (1) {print "ok"}
x keys $self
x keys %$self

