        Automatos Shell

What is it
================
Automatos Shell is an interactive shell which is easy to practise Automatos APIs.
its aim is not to replace any automatos debuggers. It can be used to run automatos
APIs step by step. Also reload the modified files in runtime to save the restart effort.


Perl Module Dependence
======================
cpan Term::ReadLine

Required for 'reload' shell command:
cpan Module::Refresh
cpan Module::Util


How to use
================
The only parameter you need to the automatos testbed file as same as the ones you are
going to run automatos test.

[ray@localhost]./automatos-shell.pl 
Automatos Interactive Shell
Usage:  automatos-shell.pl -t testbed.xml [-s script [--shell]]
     -t|--testbed: Specify testbed file
     -s|--script:  Run command in script file
     -p|--package: Load Test Package
     -l|--level:   Debug Level (INFO, DEBUG, CMD, TRACE) while loading test bed file
     -i|--shell:   Enter Interactive Mode after script
     -h|--help:    Print this help
     -v|--verbose: Verbose mode

Don's forget to add the automatos library path to Perl running time.
i.e
export PERL5LIB=/opt/automatos/Automatos/Framework/Dev/lib:$PERL5LIB

Automatos Shell> help
Automatos Interactive Shell Usage:
   print |p : print variable
   list  |l [host|vnx|vnxe] : print HUTs/Array Info
   view  |x : dump variable
   import [script]: load script file and then run line by line
   reload [module]: reload the module in runtime
   find [object type criteria force] : Shortcut for $device->find API
   option|o [show|debug|depth]: config setting
     i.e
       o debug TRACE: change log level to TRACE, default is INFO
       o depth 5:     set Data::Dump max depth
       o show:        show configure
   exit|CTRL+D     : exit program


Example
================
There are pre-defined variables to be used to control the automatos objects in TestBed file.
All hosts variable: @hosts if exist
All celerras variable: @celerras if exist
All vnxes variable: @vnxes if exist
All vnxs variable: @vnxs if exist
All switches variable: @switches if exist
All vplexes variable: @vplexes if exist

The above variables can be also get from 'list var' in shell console:
Automatos Shell> list var
@vplexes    => Automatos::Device::Vplex=HASH(0x600d94248) Automatos::Device::Vplex=HASH(0x607776f68)
@hosts    => Automatos::Device::Host::Unix::Linux=HASH(0x6050e0800)


now you can run any perl/automatos code in the automatos shell

i.e ./automatos-shell.pl -t testBed.xml -s batch-script or

i.e ./automatos-shell.pl -t testBed.xml
2014/04/18 02:26:48   [INFO]     >     This Test was started at the following SP time:
{
  Ip_Address => '10.109.183.152',
  Name => 'SPA',
  Time => '2014-04-18 06:26:40',
  UTC_Time => '06:26:41'
}

{
  Ip_Address => '10.109.183.153',
  Name => 'SPB',
  Time => '2014-04-18 06:26:47',
  UTC_Time => '06:26:48'
}
####All hosts variable: @hosts
####All vnxs variable: @vnxs
Automatos Shell> l host
Host    Type    IP
0    Windows    10.109.144.160
1    Linux    10.244.10.21

Automatos Shell> p @hosts
Automatos::Device::Host::Windows::Windows8=HASH(0x2eef720)Automatos::Device::Host::Unix::Linux=HASH(0x31beca8)
Automatos Shell> x $hosts[1]->run(command=>['hostname'])
'rc'
'0'
'stderr'
''
'stdout'
'harhel-1021.hai.lab.emc.com
'
Automatos Shell> p  $hosts[1]->run(command=>['hostname'])
rc0stderrstdoutharhel-1021.hai.lab.emc.com

Automatos Shell> o show
debug => INFO 
depth => 3 
Automatos Shell> o debug TRACE
Automatos Shell> x $vnxs[0]->getModel()   # practise automatos codes here
2014/04/18 02:31:50   [TRACE]     >     Running: Automatos::Wrapper::Tool::Navisphere
Method: spShow
With input Params: $VAR1 = {
          'object' => 'Automatos::Component::Sp::Emc::Vnx=HASH(0x4896a68)',
          'options' => 'ARRAY(0x4890ef0)'
        };
2014/04/18 02:31:50   [TRACE]     >     Command: ['naviseccli','-scope','0','-user','admin','-password','admin','-h','10.109.183.152','getsp']
2014/04/18 02:31:50   [CMD]     >     [Host: 10.109.144.160] naviseccli -scope 0 -user admin -password admin -h 10.109.183.152 getsp
2014/04/18 02:31:51   [CMD_RESPONSE]     >     
SP A

Cabinet:             DPE9 
Signature For The SP:          3350567
Signature For The Peer SP:     3350554
Revision Number For The SP:    05.33.000.3.965
Serial Number For The SP:      CF21V125000039
Memory Size For The SP:        32768
SP SCSI ID if Available:       0

SP B

Cabinet:             DPE9 
Signature For The SP:          3350554
Signature For The Peer SP:     3350567
Revision Number For The SP:    05.33.000.3.965
Serial Number For The SP:      CF21V125000026
Memory Size For The SP:        32768
SP SCSI ID if Available:       0


2014/04/18 02:31:51   [TRACE]     >     Command: ['naviseccli','-scope','0','-user','admin','-password','admin','-h','10.109.183.152','getagent']
2014/04/18 02:31:51   [CMD]     >     [Host: 10.109.144.160] naviseccli -scope 0 -user admin -password admin -h 10.109.183.152 getagent
2014/04/18 02:31:53   [CMD_RESPONSE]     >     
Agent Rev:           7.33.3 (9.65)
Name:                K10
Desc:                
Node:                A-FNM00125101579
Physical Node:       K10
Signature:           3350567
Peer Signature:      3350554
Revision:            05.33.000.3.965
SCSI Id:             0
Model:               VNX5800
Model Type:          Rackmount
Prom Rev:            32.50.00
SP Memory:           32768
Serial No:           FNM00125101579
SP Identifier:       A
Cabinet:             DPE9 



'VNX5800'

Tips
================
1. Suggest to set log level to TRACE, so that we can easily see all the backend command for the test.
2. All the input which successfully run in the automatos shell console will be saved to '.phistory' in current directory for future reference
3. In the currect automatos shell session, you can use CTL+R (just like bash search) to search the history command. (Only test on Linux host)
4. Use 'reload' option to refresh your modified module file, and then continue debug your codes without re-run


Batch run
===============
You can batch run command or API in shell console. Each command line by line will be run in shell console.

Automatos Shell> import smoke_test.txt
......
## File test_automatos_shell.txt Line:3 Command => "list vnx", Output =>
VNX     Name    Model    Version    SPA    SPB


## File test_automatos_shell.txt Line:4 Command => "option debug INFO", Output =>

## File test_automatos_shell.txt Line:7 Command => "$a = 1;", Output =>

## File test_automatos_shell.txt Line:8 Command => "print $a", Output =>
......
## File test_automatos_shell.txt Line:18 Command => "print @hosts", Output =>
Automatos::Device::Host::Unix::Linux=HASH(0x6050cc9a0)

## File test_automatos_shell.txt Line:19 Command => "print @vplexes", Output =>
Automatos::Device::Vplex=HASH(0x6054877c0)Automatos::Device::Vplex=HASH(0x60517b3f8)

## File test_automatos_shell.txt Line:22 Command => "my @vms = $vplexes[0]->find(type=>'VirtualVolume', criteria=>{name=>qr/Ray/i})", Output =>

## File test_automatos_shell.txt Line:23 Command => "print @vms", Output =>

## File test_automatos_shell.txt Line:27 Command => "find $vplexes[1] Extent name=>qr/Ray/i 1", Output =>
Not find any objects

## File test_automatos_shell.txt Line:28 Command => "find $vplexes[1] Volume system_id=>qr/VPD83T3/i 1", Output =>
####Found objects variable: @objects. Total number: 2862

Or it's same to use './automatos.pl -s smoke_test.txt'


Reload Module in runtime
================
Are you tired of re-run your script Once programming error happen? What's more, what if it costs plenty of minutes to start your script.
Try 'reload $Package' in automatos shell console, you can load the latest code after you modify it. Then continue test your API without re-start your test case script.

Automatos Shell> reload Automatos::Wrapper::Tool::Vplex::Device
Subroutine deviceShowVersion redefined at /SSIE-Interop-Dev/Automatos/Framework/Dev/lib/Automatos/Wrapper/Tool/Vplex/Device.pm line 56.
Subroutine parseDeviceShowVersion redefined at /SSIE-Interop-Dev/Automatos/Framework/Dev/lib/Automatos/Wrapper/Tool/Vplex/Device.pm line 128.
Subroutine deviceShowStorageVolumeSummary redefined at /SSIE-Interop-Dev/Automatos/Framework/Dev/lib/Automatos/Wrapper/Tool/Vplex/Device.pm line 208.
Subroutine parseDeviceShowStorageVolumeSummary redefined at /SSIE-Interop-Dev/Automatos/Framework/Dev/lib/Automatos/Wrapper/Tool/Vplex/Device.pm line 266.
Subroutine deviceRunCollect redefined at /SSIE-Interop-Dev/Automatos/Framework/Dev/lib/Automatos/Wrapper/Tool/Vplex/Device.pm line 350.
Subroutine parseDeviceRunCollect redefined at /SSIE-Interop-Dev/Automatos/Framework/Dev/lib/Automatos/Wrapper/Tool/Vplex/Device.pm line 424.
Subroutine validateDeviceRunCollectOutput redefined at /SSIE-Interop-Dev/Automatos/Framework/Dev/lib/Automatos/Wrapper/Tool/Vplex/Device.pm line 467.
Subroutine deviceRunHealthCheck redefined at /SSIE-Interop-Dev/Automatos/Framework/Dev/lib/Automatos/Wrapper/Tool/Vplex/Device.pm line 508.
Subroutine validateDeviceRunHealthCheck redefined at /SSIE-Interop-Dev/Automatos/Framework/Dev/lib/Automatos/Wrapper/Tool/Vplex/Device.pm line 551.
[DEBUG] Start reload packge "Automatos/Wrapper/Tool/Vplex/Device.pm"
Reload Packge "Automatos::Wrapper::Tool::Vplex::Device" done


Load Test Module
================
Load Test Module quickly, so that all APIs of Test Case module can be easily called by $self->API().
Don't forget to add 'Automatos/Tests/Dev' into perl %INC path

Run:
./automatos-shell.pl -t vplex.xml -p SSIETests::PlatformAgnostic::Interoperability::Vplex::BBT_VPLEX_Interop_00010_StorageVolume_Operations

####All hosts variable: @hosts Automatos::Device::Host::Unix::Linux=HASH(0x6050c9660)
####All vplexes variable: @vplexes Automatos::Device::Vplex=HASH(0x605489630) Automatos::Device::Vplex=HASH(0x605553e88)
####Package variable: $self SSIETests::PlatformAgnostic::Interoperability::Vplex::BBT_VPLEX_Interop_00010_StorageVolume_Operations=HASH(0x606623198)
Automatos Shell> x $self->summary($vplexes[0])
2016/06/24 00:08:31   [INFO]     >     The Storgae-Volume Summary is:
{
  size => '51.8TB',
  health => {
    out_of_date => '0',
    storage_volume_count => '1371',
    unhealthy => '0'
  },
  use => {
    claimed => '3',
    meta_data => '7',
    unclaimed => '450',
    used => '911'
  },
  vendor => {
    dgc => '1371'
  }
}

Issues
================
Please send the issues to <ray.chen@emc.com> for help.
